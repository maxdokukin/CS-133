{"cells":[{"cell_type":"markdown","metadata":{"id":"-AqiLKPR3r6d"},"source":["# Working with complicated dataset"]},{"cell_type":"markdown","metadata":{"id":"tio0jU9Y3r6h"},"source":["### Question 1\n","\n","blast_results: https://raw.githubusercontent.com/csbfx/advpy122-data/master/blast_results.csv\n","\n","Read in the data from the csv file above. Skip all the comment lines, create a header for the dataframe based on the fields list in the comment line that starts with **# Fields:**. Drop the first column `query acc.ver`. Set the `subject acc.ver` as the index of the dataframe. The last column of the dataframe should be `publications`. Show the first five rows of the resulting dataframe."]},{"cell_type":"code","execution_count":1,"metadata":{"id":"zkhws8KT3r6i","executionInfo":{"status":"ok","timestamp":1710104417696,"user_tz":420,"elapsed":1055,"user":{"displayName":"David Zhou","userId":"01932506234195044982"}},"outputId":"a58fe256-7973-4eb4-a0bc-0be88f1e8f65","colab":{"base_uri":"https://localhost:8080/","height":206}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  query acc.ver subject acc.ver  % identity  alignment length  mismatches  \\\n","0   YP_220550.1     NP_904328.1     100.000               318           0   \n","1   YP_220550.1      AGK29621.1      99.686               318           1   \n","2   YP_220550.1     YP_220563.1      99.686               318           1   \n","3   YP_220550.1      ACM24502.1      99.686               318           1   \n","4   YP_220550.1      AHG32084.1      99.371               318           2   \n","\n","   gap opens  q.start  q.end  s.start  s.end  evalue  bit score  % positives  \\\n","0          0        1    318        1    318       0        629       100.00   \n","1          0        1    318        1    318       0        629       100.00   \n","2          0        1    318        1    318       0        627       100.00   \n","3          0        1    318        1    318       0        627        99.69   \n","4          0        1    318        1    318       0        627       100.00   \n","\n","   bonds  publications  \n","0   1487             9  \n","1  17947            47  \n","2  12106            13  \n","3   2319            41  \n","4  18964             3  "],"text/html":["\n","  <div id=\"df-b7e27a43-cbcc-447f-852d-280fc982ced9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>query acc.ver</th>\n","      <th>subject acc.ver</th>\n","      <th>% identity</th>\n","      <th>alignment length</th>\n","      <th>mismatches</th>\n","      <th>gap opens</th>\n","      <th>q.start</th>\n","      <th>q.end</th>\n","      <th>s.start</th>\n","      <th>s.end</th>\n","      <th>evalue</th>\n","      <th>bit score</th>\n","      <th>% positives</th>\n","      <th>bonds</th>\n","      <th>publications</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>YP_220550.1</td>\n","      <td>NP_904328.1</td>\n","      <td>100.000</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>629</td>\n","      <td>100.00</td>\n","      <td>1487</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>YP_220550.1</td>\n","      <td>AGK29621.1</td>\n","      <td>99.686</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>629</td>\n","      <td>100.00</td>\n","      <td>17947</td>\n","      <td>47</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>YP_220550.1</td>\n","      <td>YP_220563.1</td>\n","      <td>99.686</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>627</td>\n","      <td>100.00</td>\n","      <td>12106</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>YP_220550.1</td>\n","      <td>ACM24502.1</td>\n","      <td>99.686</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>627</td>\n","      <td>99.69</td>\n","      <td>2319</td>\n","      <td>41</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>YP_220550.1</td>\n","      <td>AHG32084.1</td>\n","      <td>99.371</td>\n","      <td>318</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>627</td>\n","      <td>100.00</td>\n","      <td>18964</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7e27a43-cbcc-447f-852d-280fc982ced9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b7e27a43-cbcc-447f-852d-280fc982ced9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b7e27a43-cbcc-447f-852d-280fc982ced9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-78b48cf6-b609-40d7-a6d6-60ff8ba8f8bc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-78b48cf6-b609-40d7-a6d6-60ff8ba8f8bc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-78b48cf6-b609-40d7-a6d6-60ff8ba8f8bc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"query acc.ver\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"YP_220550.1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subject acc.ver\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"YP_009414208.1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% identity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.282019911009619,\n        \"min\": 84.543,\n        \"max\": 100.0,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          93.082\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alignment length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 315,\n        \"max\": 318,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          317\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mismatches\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 0,\n        \"max\": 49,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gap opens\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"q.start\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"q.end\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 316,\n        \"max\": 318,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          318\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s.start\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s.end\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 312,\n        \"max\": 319,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          318\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"evalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bit score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": 551,\n        \"max\": 629,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          557\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% positives\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.743204862292207,\n        \"min\": 93.69,\n        \"max\": 100.0,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          97.79\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5882,\n        \"min\": 1019,\n        \"max\": 19998,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          10226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publications\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 45,\n        \"samples\": [\n          \"25\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":1}],"source":["import pandas as pd\n","\n","link = 'https://raw.githubusercontent.com/csbfx/advpy122-data/master/blast_results.csv'\n","\n","cols = ['query acc.ver', 'subject acc.ver','% identity',\n","        'alignment length', 'mismatches', 'gap opens',\n","        'q.start', 'q.end', 's.start', 's.end', 'evalue',\n","        'bit score', '% positives', 'bonds', 'publications']\n","\n","df = pd.read_csv(link,\n","                      na_values=['-', ' '],\n","                      skiprows=7,\n","                      names= cols,\n","                      usecols=cols,\n","                      thousands=\",\",\n","                      dtype={\"publications\": 'Int64'}\n","                     )\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"aHNeMncr3r6j"},"source":["### Question 2\n","What is the average number of publications?"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"Q1JK-hYw3r6j","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710104417914,"user_tz":420,"elapsed":220,"user":{"displayName":"David Zhou","userId":"01932506234195044982"}},"outputId":"16ecd4b1-fff2-480f-e180-aef23c9c349d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["26.989690721649485"]},"metadata":{},"execution_count":2}],"source":["df.publications.mean()"]},{"cell_type":"markdown","metadata":{"id":"r4gRR96y3r6k"},"source":["### Question 3\n","List the `subject acc.ver` that has over 15,000 bonds."]},{"cell_type":"code","execution_count":3,"metadata":{"id":"pLKiddab3r6k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710104417914,"user_tz":420,"elapsed":3,"user":{"displayName":"David Zhou","userId":"01932506234195044982"}},"outputId":"28345089-9137-4c7f-dc8f-02ca968405de"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1         AGK29621.1\n","4         AHG32084.1\n","6             6G2J_H\n","12    YP_002791042.1\n","17        AGK29634.1\n","18          0806162F\n","21    YP_009112408.1\n","22    YP_001876469.1\n","24    YP_009092269.1\n","25        AHG32149.1\n","26    YP_009092074.1\n","27    YP_009450474.1\n","30    YP_004123270.1\n","31    YP_009092073.1\n","32        AHZ60901.1\n","40    YP_004123350.1\n","42    YP_009453754.1\n","44        ADD46492.1\n","46    YP_007025968.1\n","50    YP_009453806.1\n","52    YP_007024956.1\n","58        ASM92364.1\n","62    YP_006073044.1\n","63        ASM92494.1\n","64        ADG95699.1\n","68    YP_004891275.1\n","72    YP_009166014.1\n","82    YP_009538416.1\n","84    YP_009414182.1\n","85    YP_009178854.1\n","87    YP_009414415.1\n","89    YP_009353908.1\n","92    YP_009093743.1\n","95        ABX45285.1\n","97    YP_009414156.1\n","98    YP_009414363.1\n","Name: subject acc.ver, dtype: object"]},"metadata":{},"execution_count":3}],"source":["df[df.bonds > 15000]['subject acc.ver']"]},{"cell_type":"markdown","metadata":{"id":"H56QTFYU3r6l"},"source":["### Question 4\n","Create a plot that shows the correlation between `% identity` and `% positives`."]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"metadata":{"id":"hTNvV3oDdUK3","executionInfo":{"status":"ok","timestamp":1710104419419,"user_tz":420,"elapsed":1507,"user":{"displayName":"David Zhou","userId":"01932506234195044982"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","execution_count":5,"metadata":{"id":"YD3IBzmG3r6l","colab":{"base_uri":"https://localhost:8080/","height":778},"executionInfo":{"status":"ok","timestamp":1710104420836,"user_tz":420,"elapsed":1419,"user":{"displayName":"David Zhou","userId":"01932506234195044982"}},"outputId":"5961b9d6-1a4a-458f-b47f-1a91016fd299"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.83, 0.05, 'Correlation coefficient: 0.97')"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1000 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(20, 10))\n","\n","corr_coef = df['% identity'].corr(df['% positives'])\n","\n","sns.regplot(data=df,\n","            x = '% identity',\n","            y = '% positives',\n","            ci=95,\n","            marker=\"o\",\n","            scatter_kws = {\"color\": \"green\", \"alpha\": 1},\n","            line_kws=dict(color=\"r\")\n",")\n","\n","plt.title('% identity VS % positives')\n","\n","plt.text(x=0.83, y=0.05, s=f'Correlation coefficient: {corr_coef:.2f}',\n","         fontsize=12, transform=plt.gca().transAxes)"]},{"cell_type":"markdown","metadata":{"id":"pEUJxhad3r6m"},"source":["### Question  5\n","Add a column `Protein source` to the dataframe from Question 1 based on the data in this csv file: https://raw.githubusercontent.com/csbfx/advpy122-data/master/protein_source.csv. Merge the data when the `subject acc.ver` from the dataframe equals to `Protein` in the csv file. Entries without a matching protein will have `NA` as `Protein source`."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"xzIwyECv3r6m","executionInfo":{"status":"ok","timestamp":1710104420837,"user_tz":420,"elapsed":5,"user":{"displayName":"David Zhou","userId":"01932506234195044982"}}},"outputs":[],"source":["df_protein = pd.read_csv('https://raw.githubusercontent.com/csbfx/advpy122-data/master/protein_source.csv')"]},{"cell_type":"code","source":["df = df.merge(df_protein, how='outer', left_on=\"subject acc.ver\", right_on=\"Protein\").drop(['Unnamed: 0', 'Protein'], axis = 1)\n","df.rename(columns={'Source': 'Protein source'}, inplace=True)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"dqBcdJRrfvQc","executionInfo":{"status":"ok","timestamp":1710104420837,"user_tz":420,"elapsed":4,"user":{"displayName":"David Zhou","userId":"01932506234195044982"}},"outputId":"6700b942-ee52-4e65-b401-598dcac21e8e"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  query acc.ver subject acc.ver  % identity  alignment length  mismatches  \\\n","0   YP_220550.1     NP_904328.1     100.000               318           0   \n","1   YP_220550.1      AGK29621.1      99.686               318           1   \n","2   YP_220550.1     YP_220563.1      99.686               318           1   \n","3   YP_220550.1      ACM24502.1      99.686               318           1   \n","4   YP_220550.1      AHG32084.1      99.371               318           2   \n","\n","   gap opens  q.start  q.end  s.start  s.end  evalue  bit score  % positives  \\\n","0          0        1    318        1    318       0        629       100.00   \n","1          0        1    318        1    318       0        629       100.00   \n","2          0        1    318        1    318       0        627       100.00   \n","3          0        1    318        1    318       0        627        99.69   \n","4          0        1    318        1    318       0        627       100.00   \n","\n","   bonds  publications Protein source  \n","0   1487             9         RefSeq  \n","1  17947            47            NaN  \n","2  12106            13        GenPept  \n","3   2319            41            NaN  \n","4  18964             3            NaN  "],"text/html":["\n","  <div id=\"df-6be7811d-4a2b-4442-b0f6-923ba5ac90e9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>query acc.ver</th>\n","      <th>subject acc.ver</th>\n","      <th>% identity</th>\n","      <th>alignment length</th>\n","      <th>mismatches</th>\n","      <th>gap opens</th>\n","      <th>q.start</th>\n","      <th>q.end</th>\n","      <th>s.start</th>\n","      <th>s.end</th>\n","      <th>evalue</th>\n","      <th>bit score</th>\n","      <th>% positives</th>\n","      <th>bonds</th>\n","      <th>publications</th>\n","      <th>Protein source</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>YP_220550.1</td>\n","      <td>NP_904328.1</td>\n","      <td>100.000</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>629</td>\n","      <td>100.00</td>\n","      <td>1487</td>\n","      <td>9</td>\n","      <td>RefSeq</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>YP_220550.1</td>\n","      <td>AGK29621.1</td>\n","      <td>99.686</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>629</td>\n","      <td>100.00</td>\n","      <td>17947</td>\n","      <td>47</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>YP_220550.1</td>\n","      <td>YP_220563.1</td>\n","      <td>99.686</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>627</td>\n","      <td>100.00</td>\n","      <td>12106</td>\n","      <td>13</td>\n","      <td>GenPept</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>YP_220550.1</td>\n","      <td>ACM24502.1</td>\n","      <td>99.686</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>627</td>\n","      <td>99.69</td>\n","      <td>2319</td>\n","      <td>41</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>YP_220550.1</td>\n","      <td>AHG32084.1</td>\n","      <td>99.371</td>\n","      <td>318</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>1</td>\n","      <td>318</td>\n","      <td>0</td>\n","      <td>627</td>\n","      <td>100.00</td>\n","      <td>18964</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6be7811d-4a2b-4442-b0f6-923ba5ac90e9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6be7811d-4a2b-4442-b0f6-923ba5ac90e9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6be7811d-4a2b-4442-b0f6-923ba5ac90e9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0581f5a0-4774-4c13-96a1-2eebcc98bc0f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0581f5a0-4774-4c13-96a1-2eebcc98bc0f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0581f5a0-4774-4c13-96a1-2eebcc98bc0f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"query acc.ver\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"YP_220550.1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subject acc.ver\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"YP_009414208.1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% identity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.282019911009619,\n        \"min\": 84.543,\n        \"max\": 100.0,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          93.082\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alignment length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 315,\n        \"max\": 318,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          317\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mismatches\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 0,\n        \"max\": 49,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gap opens\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"q.start\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"q.end\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 316,\n        \"max\": 318,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          318\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s.start\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s.end\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 312,\n        \"max\": 319,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          318\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"evalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bit score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": 551,\n        \"max\": 629,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          557\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% positives\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.743204862292207,\n        \"min\": 93.69,\n        \"max\": 100.0,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          97.79\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5882,\n        \"min\": 1019,\n        \"max\": 19998,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          10226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publications\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 45,\n        \"samples\": [\n          \"25\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Protein source\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"RefSeq\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"colab":{"provenance":[{"file_id":"1mT0d5EQ_JnPEsGnthjkQoWvSvD3Pp3Pk","timestamp":1709688747008}]}},"nbformat":4,"nbformat_minor":0}